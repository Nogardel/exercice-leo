import { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { Navigate } from 'react-router-dom';
import UserProfile from '../components/auth/UserProfile';
import './Pages.css';
import { 
  fetchTodos, 
  addTodo, 
  deleteTodo, 
  updateTodo, 
  fetchDoneTodos 
} from '../services/todoService';

const TodoPage = ({ user, onLogout }) => {
  const [todos, setTodos] = useState([]);
  const [newTaskText, setNewTaskText] = useState('');
  const [filteredTodos, setFilteredTodos] = useState([]);
  const [showFiltered, setShowFiltered] = useState(false);
  const [searchKeyword, setSearchKeyword] = useState('');
  const [showDoneTasks, setShowDoneTasks] = useState(false);

  // Fonction pour r√©cup√©rer et mettre √† jour les todos dans l'√©tat
  const loadTodos = async () => {
    try {
      // R√©cup√©rer seulement les todos de l'utilisateur connect√© en passant son UID
      const data = await fetchTodos(user.uid);
      setTodos(data || []);
      setShowFiltered(false);
    } catch (error) {
      console.error('Erreur lors du chargement des t√¢ches:', error);
      setTodos([]);
    }
  };

  // Fonction pour charger les t√¢ches termin√©es
  const loadDoneTodos = async () => {
    try {
      // R√©cup√©rer seulement les todos termin√©s de l'utilisateur connect√©
      const data = await fetchDoneTodos(user.uid);
      setTodos(data || []);
      setShowDoneTasks(true);
      setShowFiltered(false);
    } catch (error) {
      console.error('Erreur lors du chargement des t√¢ches termin√©es:', error);
      setTodos([]);
    }
  };

  // Fonction pour revenir √† toutes les t√¢ches
  const loadAllTodos = async () => {
    await loadTodos();
    setShowDoneTasks(false);
  };

  useEffect(() => {
    // Si l'utilisateur n'est pas connect√©, on ne charge pas les t√¢ches
    if (user) {
      loadTodos();
    }
  }, [user]);

  // Fonction pour ajouter une t√¢che via l'API
  const ajouterTache = async () => {
    if (!newTaskText.trim()) {
      alert('Veuillez entrer un nom pour la t√¢che');
      return;
    }

    try {
      // Ajouter la t√¢che avec l'UID de l'utilisateur connect√©
      await addTodo(newTaskText, user.uid);
      await loadTodos();
      setNewTaskText('');
    } catch (error) {
      console.error('Erreur lors de l\'ajout d\'une t√¢che:', error);
      alert('Impossible d\'ajouter la t√¢che. Veuillez v√©rifier que le serveur est en cours d\'ex√©cution.');
    }
  };

  // G√©rer la soumission du formulaire pour √©viter le rechargement de la page
  const handleSubmit = (e) => {
    e.preventDefault();
    ajouterTache();
  };

  // Fonction pour supprimer une t√¢che
  const supprimerTache = async (id) => {
    try {
      await deleteTodo(id);
      await loadTodos();
    } catch (error) {
      console.error('Erreur lors de la suppression d\'une t√¢che:', error);
    }
  };

  // Fonction pour basculer l'√©tat d'une t√¢che (fait/pas fait)
  const toggleTaskStatus = async (id, currentDone) => {
    try {
      await updateTodo(id, { done: !currentDone });
      await loadTodos();
    } catch (error) {
      console.error('Erreur lors de la mise √† jour d\'une t√¢che:', error);
    }
  };

  // Fonction pour filtrer les todos non termin√©s
  const filterIncompleteTodos = () => {
    if (!showFiltered) {
      const nonTermines = todos.filter(todo => !todo.done);
      setFilteredTodos(nonTermines);
      setShowFiltered(true);
    } else {
      setShowFiltered(false);
    }
  };

  // Fonction pour la recherche par mot-cl√©
  const handleSearch = (e) => {
    const keyword = e.target.value;
    setSearchKeyword(keyword);
  };

  // Filtrer les todos en fonction de la recherche
  const getFilteredTodos = () => {
    if (searchKeyword.trim() === '') {
      return todosToDisplay;
    }
    return todosToDisplay.filter(todo => 
      todo.text.toLowerCase().includes(searchKeyword.toLowerCase())
    );
  };

  // D√©terminer quels todos afficher (tous ou filtr√©s)
  const todosToDisplay = showFiltered ? filteredTodos : todos;

  // Si l'utilisateur n'est pas authentifi√©, rediriger vers la page d'authentification
  if (!user) {
    return <Navigate to="/auth" replace />;
  }

  return (
    <div className="todo-page">
      <div className="header-container">
        <h1>Ma Todo List</h1>
        <UserProfile user={user} onLogout={onLogout} />
      </div>
      
      <div className="todos-container">
        <h2>Mes t√¢ches :</h2>
        
        {/* Formulaire pour ajouter une t√¢che */}
        <form onSubmit={handleSubmit} className="add-task-form">
          <input
            type="text"
            value={newTaskText}
            onChange={(e) => setNewTaskText(e.target.value)}
            placeholder="Nom de la t√¢che"
            className="task-input"
          />
          <button type="submit">Ajouter une t√¢che</button>
        </form>

        {/* Barre de recherche */}
        <div className="search-container">
          <input
            type="text"
            value={searchKeyword}
            onChange={handleSearch}
            placeholder="Rechercher une t√¢che..."
            className="search-input"
          />
        </div>
        
        {/* Boutons de filtrage */}
        <div className="filter-buttons">
          <button 
            onClick={filterIncompleteTodos} 
            className={`filter-btn ${showFiltered ? 'active' : ''}`}
          >
            {showFiltered ? 'Afficher toutes les t√¢ches' : 'Afficher uniquement les t√¢ches non termin√©es'}
          </button>
          
          <button 
            onClick={showDoneTasks ? loadAllTodos : loadDoneTodos} 
            className={`filter-btn ${showDoneTasks ? 'active' : ''}`}
          >
            {showDoneTasks ? 'Afficher toutes les t√¢ches' : 'Afficher uniquement les t√¢ches termin√©es'}
          </button>
        </div>
        
        {/* Liste des todos */}
        {getFilteredTodos().length > 0 ? (
          <ul className="todo-list">
            {getFilteredTodos().map((todo) => (
              <li key={todo.id || Math.random()} className={todo.done ? 'task-done' : ''}>
                <input
                  type="checkbox"
                  checked={todo.done}
                  onChange={() => toggleTaskStatus(todo.id, todo.done)}
                />
                <span className="todo-text">{todo.text}</span>
                <button 
                  className="delete-btn"
                  onClick={() => supprimerTache(todo.id)}
                  title="Supprimer"
                >
                  üóëÔ∏è
                </button>
              </li>
            ))}
          </ul>
        ) : (
          <p>Aucune t√¢che √† afficher.</p>
        )}
      </div>
    </div>
  );
};

TodoPage.propTypes = {
  user: PropTypes.object,
  onLogout: PropTypes.func
};

export default TodoPage;
